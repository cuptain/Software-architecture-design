@startuml Class Diagram

Sensor -|> Component
Actuator -|> Component
ComponentStore -|> IComponent
Proxy -|> IComponent
Program --* Proxy
Sensor --o ComponentContext
Actuator --o ComponentContext
Component -- ComponentStore
ComponentStore -- ComponentContext

class ComponentContext {
    Components: List<Component>
    
    ComponentContext()
}

class Component {
    id: int
    name: string
    date: DateTime
    
    Component(id int, name string, date DateTime)
    GetFunction()
}

class Sensor {
    TypesOfSensors: List<string>
    TypesOfSignal: List<string>
    TypeOfSensor: string
    TypeOfSignal: string
    
    Component(id int, name string, date DateTime, string typeOfSensor, string typeOfSignal)
    GetFunction()
}

class Actuator {
    TypesOfActuators: List<string>
    StatusesOfActuators: List<string>
    TypeOfActuator: string
    StatusOfActuator: string
    
    Component(id int, name string, date DateTime, string typeOfActuator, string statusOfActuator)
    GetFunction()
}

class IComponent {
    
    GetComponent(id int) Component
}

class Proxy {
    components: List<Component>
    componentStore: ComponentStore
    
    Proxy()
    GetComponent(id int) Component
}

class ComponentStore {
    container: ComponentContext
    
    ComponentStore()
    GetComponent(id int) Component
}

class Program {
 
    Main(args[] string)
}


@enduml